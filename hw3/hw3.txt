#include <stdio.h>
#include <math.h>



double bisection(double f(double), double a, double b, double TOL) {
	if(fabs(f(a)) + fabs(f(b)) == fabs(f(a)+f(b))) {
		printf("Interval does not contain root.\n");
		return -99999;

	}
	printf(" a           b          (a+b)/2         f((a+b)/2) \n");
	while(fabs(b-a) > TOL) {
		printf("%12.5f %12.5f %12.5f %12.5f \n", a, b, (a+b)/2, f((a+b)/2));
		double middle = (a+b)/2;
		if(fabs(f(a)) + fabs(f(middle)) == fabs(f(a)+f(middle))) {
			a = middle;
		}
		else {
			b = middle;
		}
		
	}
	return a;
}


double bracketRoot(double f(double), double a, double step) {
	double b = a;
	//printf("%f %f %f %f \n", a, fabs(f(a)), b, fabs(f(b)));

	while(fabs(f(a)) + fabs(f(b)) == fabs(f(a)+f(b))) {
		b = b + step;
	}
	return b;
}
double f(double x) {
	return pow(x, 3.0) - 5.0*x + 3.0;
}

main() {
	double a1 = 0;
	double b1 = bracketRoot(f, a1, 0.5);
	double a2 = b1;
	double b2 = bracketRoot(f, a2, 0.5);
	//printf(" %f %f %f %f \n", a1, b1, a2, b2);
	double r1 = bisection(f, a1, b1, 1.e-5);
	printf("Root 1 at x = %3.4f \n", r1);
	double r2 = bisection(f, a2, b2, 1.e-5);
	printf("Root 2 at x = %3.4f \n", r2);
}
	

Output:

 a           b          (a+b)/2         f((a+b)/2) 
     0.00000      1.00000      0.50000      0.62500 
     0.50000      1.00000      0.75000     -0.32812 
     0.50000      0.75000      0.62500      0.11914 
     0.62500      0.75000      0.68750     -0.11255 
     0.62500      0.68750      0.65625      0.00137 
     0.65625      0.68750      0.67188     -0.05608 
     0.65625      0.67188      0.66406     -0.02747 
     0.65625      0.66406      0.66016     -0.01308 
     0.65625      0.66016      0.65820     -0.00586 
     0.65625      0.65820      0.65723     -0.00225 
     0.65625      0.65723      0.65674     -0.00044 
     0.65625      0.65674      0.65649      0.00047 
     0.65649      0.65674      0.65662      0.00002 
     0.65662      0.65674      0.65668     -0.00021 
     0.65662      0.65668      0.65665     -0.00010 
     0.65662      0.65665      0.65663     -0.00004 
     0.65662      0.65663      0.65662     -0.00001 
Root 1 at x = 0.6566 
 a           b          (a+b)/2         f((a+b)/2) 
     1.00000      2.00000      1.50000     -1.12500 
     1.50000      2.00000      1.75000     -0.39062 
     1.75000      2.00000      1.87500      0.21680 
     1.75000      1.87500      1.81250     -0.10815 
     1.81250      1.87500      1.84375      0.04892 
     1.81250      1.84375      1.82812     -0.03096 
     1.82812      1.84375      1.83594      0.00865 
     1.82812      1.83594      1.83203     -0.01124 
     1.83203      1.83594      1.83398     -0.00132 
     1.83398      1.83594      1.83496      0.00366 
     1.83398      1.83496      1.83447      0.00117 
     1.83398      1.83447      1.83423     -0.00007 
     1.83423      1.83447      1.83435      0.00055 
     1.83423      1.83435      1.83429      0.00024 
     1.83423      1.83429      1.83426      0.00008 
     1.83423      1.83426      1.83424      0.00000 
     1.83423      1.83424      1.83424     -0.00004 
Root 2 at x = 1.8342 

=================================================================================

#include <stdio.h>
#include <math.h>


double newton(double f(double), double fprime(double), double root, double TOL) {
	double prevroot = root;
	double newroot = root;
	printf("     X(n-1)            X(n)      |X(n) - X(n-1)| \n");
	double r;
	while(1) {
		r = newroot - f(newroot)/fprime(newroot);
		prevroot = newroot;
		newroot = r;
		printf(" %5.14f %5.14f %5.14f \n", prevroot, newroot, fabs(newroot - prevroot));
		if(fabs(prevroot - newroot) < TOL) break;
	}
	return newroot;

}
----------------------------------------------------------------------
#include <math.h>
#include <stdio.h>

/*
double f(double x) {
	return pow(x, 3.0) - 5*x + 3;
}
*/

double fprime(double x) {
	return 3*pow(x, 2.0) - 5;
}

main() {
	double a1 = -100.0;
	double b1 = bracketRoot(f, a1, 0.5);
	double a2 = b1;
	double b2 = bracketRoot(f, a2, 0.5);
	double rootguess1 = bisection(f, a1, b1, 1.e-4);
	double rootguess1 = bisection(f, a2, b2, 1.e-4);
	double rootprecise1 = newton(f, fprime, rootguess1, 1.e-12);
	double rootprecise2 = newton(f, fprime, rootguess2, 1.e-12);

}

Output:

     X(n-1)            X(n)      |X(n) - X(n-1)| 
 0.65660000000000 0.65662043082528 0.00002043082528 
 0.65662043082528 0.65662043104711 0.00000000022183 
 0.65662043104711 0.65662043104711 0.00000000000000 
Root found at x = 0.65662043104711 
     X(n-1)            X(n)      |X(n) - X(n-1)| 
 1.83420000000000 1.83424318632886 0.00004318632886 
 1.83424318632886 1.83424318431392 0.00000000201493 
 1.83424318431392 1.83424318431392 0.00000000000000 
Root found at x = 1.83424318431392 

=========================================================================================


#include <stdio.h>
#include <math.h>

double secant(double f(double), double x0, double x1, double TOL) {

	double x_2 = x0;
	double x_1 = x1;

	double x = 0;
	printf("x(n-2)    x(n-1)    |x(n-1) - x(n-2)| \n");  
	while(fabs(x_2 - x_1) > TOL) {
		x = (x_2*f(x_1) - x_1*f(x_2))/(f(x_1) - f(x_2));
		x_2 = x_1;
		x_1 = x;
		printf("%5.12f %5.12f %5.12f \n", x_2, x_1, fabs(x_1 - x_2));
	}

	printf("Found root at x = %5.12f \n", x_1);
}

double f(double x) {
	return tanh(2*x);
}

main() {
	double rootguess1 = 0;
	double rootguess2 = 0.5;
	secant(f, rootguess1, rootguess2, 1.e-12);
}


Output:

    x(n-2)          x(n-1)      |x(n-1) - x(n-2)| 
1.000000000000 0.959253957060 0.040746042940 
0.959253957060 0.957530539567 0.001723417494 
0.957530539567 0.957504041761 0.000026497806 
0.957504041761 0.957504024077 0.000000017683 
0.957504024077 0.957504024077 0.000000000000 
Found root at x = 0.957504024077 

===================================================================================

#include <math.h>
#include <stdio.h>


double f(double x) {
	return x*x - 2;
}
double fprime(double x) {
	return 2*x;
}
main() {
	double rootguess = 1.4;
	newton(f, fprime, rootguess, 1.e-14);
}


Output:

     X(n-1)            X(n)      |X(n) - X(n-1)| 
 1.40000000000000 1.41428571428571 0.01428571428571 
 1.41428571428571 1.41421356421356 0.00007215007215 
 1.41421356421356 1.41421356237310 0.00000000184047 
 1.41421356237310 1.41421356237309 0.00000000000000 
Root found at x = 1.41421356237309 


===========================================================================================

#include <math.h>
#include <stdio.h>

double rk2(double f(double, double), double x0, double y0, double xfinal, int n) { 
	double xnew = x0;
	double ynew = y0;
	double k1;
	double k2;
	int i;
	double h = fabs(xfinal-x0)/n;
	for(i = 0; i < n; i++) {
		k1 = f(xnew, ynew);
		k2 = f(xnew + h, ynew + h*k1);
		ynew = ynew + h*(0.5*k1 + 0.5*k2);
		xnew = xnew + h;
		//printf("%12.6f %12.6f \n", xnew, ynew);
	}
	return ynew;
}

double f(double x, double y) {
	return 1 + y*y;
}

main() {
	int i;
	double yfinal = 0;
	double yprevious;
	int n = 2;
	printf("Intervals    Yn(x)     |Yn(x) - Yn-1(x)|  |tan(pi/4) - Yn(x)| \n");
	for(i = 0; i < 10; i++) {
		yprevious = yfinal;
		yfinal = rk2(f, 0, 0, 0.785398, n);
		n = n*2;
		printf("%5d   %12.6f    %12.6f  %12.6f \n", n, yfinal, fabs(yprevious - yfinal), fabs(1 - yfinal));
	}
}

Output:

Intervals    Yn(x)     |Yn(x) - Yn-1(x)|  |tan(pi/4) - Yn(x)| 
    4       1.004918        1.004918      0.004918 
    8       1.001129        0.003788      0.001129 
   16       1.000328        0.000802      0.000328 
   32       1.000094        0.000233      0.000094 
   64       1.000025        0.000069      0.000025 
  128       1.000006        0.000019      0.000006 
  256       1.000001        0.000005      0.000001 
  512       1.000000        0.000001      0.000000 
 1024       1.000000        0.000000      0.000000 
 2048       1.000000        0.000000      0.000000 


====================================================================================


#include <stdio.h>
#include <math.h>

double f(double x, double y) {
	return 1 + y*y;
}




double rk4(double f(double, double), double x0, double y0, double xfinal, int n, int p) {
	double k1;
	double k2;
	double k3;
	double k4;
	double x = x0;
	double y = y0;
	double yprev = y0;

	double h = fabs(xfinal-x0)/n;

	int i;
	if(p) printf("     x            t \n");
	for(i = 0; i < n; i++) {
		k1 = f(x, y);
		k2 = f(x + 0.5*h, y + (h/2)*k1);
		k3 = f(x + (h/2), y + (h/2)*k2);
		k4 = f(x + h, y + h*k3);
		if(p) {
			printf("%12.6f %12.6f \n", y, x);
		}
		y = y + (h/6)*(k1 + 2*k2 + 2*k3 + k4);
		x = x + h;
	}
	return y;
}
double oscillator(double x, double y) {
	return 2 - (1/2)*pow(y, 4.0);
}
main() {
	printf("Question 6, anharmonic oscillator: \n");
	printf("Amplitude = 0.1: \n");
	double y1 = rk4(oscillator, 0, 0.1, 10, 20, 1);
	printf("Amplitude = 1: \n");
	double y2 = rk4(oscillator, 0, 1, 10, 20, 1);
	printf("Amplitude = 10: \n");
	double y3 = rk4(oscillator, 0, 10, 10, 20, 1);


	printf("\n \n Question 7: \n");
	int i;
	int n = 1;
	printf("Intervals    Yn      |tan(pi/4) - Y(n)| \n");
	for(i = 0; i < 10; i++) {
		double Yn = rk4(f, 0, 0, 0.7853981, n, 0);
		printf(" %5d   %12.6f   %12.6f \n", n, Yn, fabs(1 - Yn));
		n = n*2;
	}

}


Output:

Question 6, anharmonic oscillator: 
Amplitude = 0.1: 
     x            t 
    0.100000     0.000000 
    1.100000     0.500000 
    2.100000     1.000000 
    3.100000     1.500000 
    4.100000     2.000000 
    5.100000     2.500000 
    6.100000     3.000000 
    7.100000     3.500000 
    8.100000     4.000000 
    9.100000     4.500000 
   10.100000     5.000000 
   11.100000     5.500000 
   12.100000     6.000000 
   13.100000     6.500000 
   14.100000     7.000000 
   15.100000     7.500000 
   16.100000     8.000000 
   17.100000     8.500000 
   18.100000     9.000000 
   19.100000     9.500000 
Amplitude = 1: 
     x            t 
    1.000000     0.000000 
    2.000000     0.500000 
    3.000000     1.000000 
    4.000000     1.500000 
    5.000000     2.000000 
    6.000000     2.500000 
    7.000000     3.000000 
    8.000000     3.500000 
    9.000000     4.000000 
   10.000000     4.500000 
   11.000000     5.000000 
   12.000000     5.500000 
   13.000000     6.000000 
   14.000000     6.500000 
   15.000000     7.000000 
   16.000000     7.500000 
   17.000000     8.000000 
   18.000000     8.500000 
   19.000000     9.000000 
   20.000000     9.500000 
Amplitude = 10: 
     x            t 
   10.000000     0.000000 
   11.000000     0.500000 
   12.000000     1.000000 
   13.000000     1.500000 
   14.000000     2.000000 
   15.000000     2.500000 
   16.000000     3.000000 
   17.000000     3.500000 
   18.000000     4.000000 
   19.000000     4.500000 
   20.000000     5.000000 
   21.000000     5.500000 
   22.000000     6.000000 
   23.000000     6.500000 
   24.000000     7.000000 
   25.000000     7.500000 
   26.000000     8.000000 
   27.000000     8.500000 
   28.000000     9.000000 
   29.000000     9.500000 

 
 Question 7: 
Intervals    Yn      |tan(pi/4) - Y(n)| 
     1       0.996886       0.003114 
     2       0.999836       0.000164 
     4       0.999999       0.000001 
     8       1.000000       0.000000 
    16       1.000000       0.000000 
    32       1.000000       0.000000 
    64       1.000000       0.000000 
   128       1.000000       0.000000 
   256       1.000000       0.000000 
   512       1.000000       0.000000 



